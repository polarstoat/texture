{"version":3,"sources":["serviceWorker.js","utility.js","share.js","MuteButton.jsx","Header.jsx","VolumeSlider.jsx","Sound.jsx","Sounds.jsx","BodyText.jsx","ShareURL.jsx","Footer.jsx","App.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","angles","SCALE","hueIsTooClose","hue","hues","some","value","distance","previousHueIsTooClose","previousHue","previousLightnessIsTooClose","lightness","previousLightness","Math","abs","validateInt","int","min","max","Number","isInteger","separateHueAndLightness","combined","readSoundData","buffer","index","view","DataView","soundData","push","getUint16","encodeShareURL","sounds","buf","ArrayBuffer","forEach","sound","filename","volume","fileIndex","soundFilenames","indexOf","RangeError","combineHueAndLightness","setUint16","writeSoundData","round","byteArray","Uint8Array","Base64","fromUint8Array","decodeShareURL","encodedString","toUint8Array","MuteButton","this","props","muted","onToggle","Button","variant","className","onClick","size","PureComponent","Header","document","addEventListener","onMuteToggle","onShuffleClick","Navbar","bg","Brand","Component","Slider","handleChange","bind","event","onChange","target","valueAsNumber","audioLoaded","FormControl","disabled","type","step","custom","Sound","state","loaded","handleVolumeChange","audio","Howl","src","loop","autoplay","once","setState","unload","onVolumeChange","Form","Group","style","backgroundColor","VolumeSlider","process","Sounds","columns","map","Col","key","Row","BodyText","Container","fluid","md","role","href","rel","alt","ShareURL","handleClick","focus","select","shareableUrl","InputGroup","Prepend","Text","id","Control","aria-label","aria-describedby","readOnly","Footer","getRandomSounds","currentSounds","filenames","randomFilename","randomInt","length","findIndex","numberToGet","getUniqueHues","lightnesses","getUniqueLightnesses","App","hash","substr","ls","get","Howler","mute","handleShuffleClick","handleMuteToggle","handleHashChange","removeEventListener","prevState","set","origin","pathname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1da3ab9a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import angles from 'angles';\nimport randomInt from 'random-int';\n\nangles.SCALE = 360;\n\n/**\n * The minimum distance (in degrees) between each generated hue\n *\n * @type {Number}\n */\nconst MIN_HUE_DISTANCE = 30;\n\n/**\n * The minimum distance (in degrees) between two adjacently displayed hues\n *\n * @type {Number}\n */\nconst MIN_ADJACENT_HUE_DISTANCE = 60;\n\nconst MIN_ADJACENT_LIGHTNESS_DISTANCE = 5;\n\n/**\n * Checks if the given hue is too close to any in the array of existing hues\n *\n * @param  {Number} hue  The hue to check\n * @param  {Number[]} hues The array of existing hues to check against\n * @return {Boolean}      Whether the given hue is too close to any in the array of existing hues\n */\nfunction hueIsTooClose(hue, hues) {\n  if (hues.some((value) => angles.distance(value, hue) < MIN_HUE_DISTANCE)) return true;\n  return false;\n}\n\n/**\n * Checks if the given hue is too close to the previous (adjacently displayed) hue\n *\n * @param  {Number} hue         The hue to check\n * @param  {Number} previousHue The previous hue to check against\n * @return {Boolean}             Whether the given hue is too close to the previous hue\n */\nfunction previousHueIsTooClose(hue, previousHue) {\n  if (angles.distance(hue, previousHue) < MIN_ADJACENT_HUE_DISTANCE) return true;\n  return false;\n}\n\nfunction getUniqueHues(numberToGet) {\n  const hues = [];\n\n  while (hues.length < numberToGet) {\n    const hue = randomInt(359);\n\n    if (\n      hues.length === 0\n      || (!hueIsTooClose(hue, hues)\n      && !previousHueIsTooClose(hue, hues[hues.length - 1]))\n    ) hues.push(hue);\n  }\n\n  return hues;\n}\n\nfunction previousLightnessIsTooClose(lightness, previousLightness) {\n  if (Math.abs(lightness - previousLightness) < MIN_ADJACENT_LIGHTNESS_DISTANCE) return true;\n  return false;\n}\n\nfunction getUniqueLightnesses(numberToGet) {\n  const lightnesses = [];\n\n  while (lightnesses.length < numberToGet) {\n    const lightness = randomInt(65, 85);\n\n    if (\n      lightnesses.length === 0\n      || !previousLightnessIsTooClose(lightness, lightnesses[lightnesses.length - 1])\n    ) lightnesses.push(lightness);\n  }\n\n  return lightnesses;\n}\n\nexport {\n  getUniqueHues,\n  getUniqueLightnesses,\n};\n","import { Base64 } from 'js-base64';\n\nimport soundFilenames from './soundFilenames.json';\n\nconst VOLUME_PRECISION = 1000;\nconst HUE_BITS = 9;\n\nfunction validateInt(int, min, max) {\n  if (!Number.isInteger(int) || int < min || int > max) return false;\n\n  return true;\n}\n\n/**\n * Combines a hue (integer of 0-360, stored in 9 bits) and lightness (integer of 0-100, stored in\n *   7 bits) into one 16 bit integer\n *\n * ┌───────────────────────────────────────────────────────────────┐\n * │ Combined hue and lightness (35523)                            │\n * ├───────────────────────────┬───────────────────────────────────┤\n * │ Lightness (69)            │ Hue (195)                         │\n * ├───┬───┬───┬───┬───┬───┬───┼───┬───┬───┬───┬───┬───┬───┬───┬───┤\n * │ 1 │ 0 │ 0 │ 0 │ 1 │ 0 │ 1 │ 0 │ 1 │ 1 │ 0 │ 0 │ 0 │ 0 │ 1 │ 1 │\n * └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘\n *\n * @param  {number} hue       The hue to combine\n * @param  {number} lightness The lightness to combine\n * @return {number}           The combined hue and lightness\n */\nfunction combineHueAndLightness(hue, lightness) {\n  if (!validateInt(hue)) throw new RangeError(`Invalid hue: ${hue}`);\n  if (!validateInt(lightness)) throw new RangeError(`Invalid lightness: ${lightness}`);\n\n  return (lightness << HUE_BITS) + hue;\n}\n\n/**\n * Separates a combined hue and lightness created from the above function `combineHueAndLightness()`\n *\n * @param  {number} combined The combined hue and lightness\n * @return {{hue: number, lightness: number}} An object with the separated hue and lightness as keys\n */\nfunction separateHueAndLightness(combined) {\n  // Create a mask over the lightness bits\n  // See: https://en.wikipedia.org/wiki/Mask_(computing)#Masking_bits_to_0\n  const mask = 0b111111111;\n\n  const hue = combined & mask;\n  const lightness = combined >> HUE_BITS;\n\n  return {\n    hue,\n    lightness,\n  };\n}\n\n/**\n * Write a sound data array to the specified buffer\n *\n * @param  {ArrayBuffer} buffer    The buffer to write the data to\n * @param  {number} index     The index of the sound (0-5)\n * @param  {number[]} soundData The array of numbers to write\n */\nfunction writeSoundData(buffer, index, soundData) {\n  const view = new DataView(buffer, index * 6, 6);\n\n  view.setUint16(0, soundData[0]);\n  view.setUint16(2, soundData[1]);\n  view.setUint16(4, soundData[2]);\n}\n\n/**\n * Read a sound data array from the specified buffer\n *\n * @param  {ArrayBuffer} buffer The buffer to read the data from\n * @param  {number} index  The index of the sound to read (0-5)\n * @return {number[]}        The data array\n */\nfunction readSoundData(buffer, index) {\n  const view = new DataView(buffer, index * 6, 6);\n\n  const soundData = [];\n\n  soundData.push(view.getUint16(0));\n  soundData.push(view.getUint16(2));\n  soundData.push(view.getUint16(4));\n\n  return soundData;\n}\n\nfunction encodeShareURL(sounds) {\n  const buf = new ArrayBuffer(36);\n\n  sounds.forEach((sound, index) => {\n    const {\n      filename,\n      hue,\n      lightness,\n      volume,\n    } = sound;\n\n    const fileIndex = soundFilenames.indexOf(filename);\n    const combined = combineHueAndLightness(hue, lightness);\n\n    writeSoundData(buf, index, [\n      fileIndex,\n      Math.round(volume * VOLUME_PRECISION),\n      combined,\n    ]);\n  });\n\n  const byteArray = new Uint8Array(buf);\n\n  return Base64.fromUint8Array(byteArray, true);\n}\n\nfunction decodeShareURL(encodedString) {\n  const byteArray = Base64.toUint8Array(encodedString);\n  const buf = byteArray.buffer;\n\n  const sounds = [];\n\n  for (let index = 0; index < 6; index += 1) {\n    const [fileIndex, volume, combined] = readSoundData(buf, index);\n\n    const { hue, lightness } = separateHueAndLightness(combined);\n\n    sounds.push({\n      filename: soundFilenames[fileIndex],\n      hue,\n      lightness,\n      volume: volume / VOLUME_PRECISION,\n    });\n  }\n\n  return sounds;\n}\n\nexport { encodeShareURL, decodeShareURL };\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport { BsVolumeMuteFill, BsVolumeUpFill } from 'react-icons/bs';\n\nconst iconSize = '1.5em';\n\nclass MuteButton extends PureComponent {\n  render() {\n    const { muted, onToggle } = this.props;\n\n    return (\n      <Button variant={muted ? 'light' : 'secondary'} className={muted ? 'muted' : 'unmuted'} onClick={onToggle}>{muted ? <BsVolumeMuteFill size={iconSize} /> : <BsVolumeUpFill size={iconSize} />}</Button>\n    );\n  }\n}\n\nMuteButton.propTypes = {\n  muted: PropTypes.bool.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default MuteButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\nimport { BsShuffle } from 'react-icons/bs';\n\nimport MuteButton from './MuteButton';\n\nimport './Header.css';\n\nclass Header extends Component {\n  componentDidMount() {\n    document.addEventListener('touchend', () => {}, false);\n  }\n\n  render() {\n    const { muted, onMuteToggle, onShuffleClick } = this.props;\n\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Texture</Navbar.Brand>\n        <div className=\"buttons\">\n          <MuteButton onToggle={onMuteToggle} muted={muted} />\n          <Button variant=\"primary\" onClick={onShuffleClick}><BsShuffle size=\"1.5em\" /></Button>\n        </div>\n      </Navbar>\n    );\n  }\n}\n\nHeader.propTypes = {\n  muted: PropTypes.bool.isRequired,\n  onMuteToggle: PropTypes.func.isRequired,\n  onShuffleClick: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from 'react-bootstrap/FormControl';\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const { onChange } = this.props;\n    onChange(event.target.valueAsNumber);\n  }\n\n  render() {\n    const { value, audioLoaded } = this.props;\n    return (\n      <FormControl value={value} onChange={this.handleChange} disabled={!audioLoaded} type=\"range\" min={0} max={1} step=\"any\" custom />\n    );\n  }\n}\n\nSlider.propTypes = {\n  value: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n  audioLoaded: PropTypes.bool.isRequired,\n};\n\nexport default Slider;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Form from 'react-bootstrap/Form';\nimport { Howl } from 'howler';\n\nimport VolumeSlider from './VolumeSlider';\n\nimport './Sound.css';\n\nclass Sound extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false,\n    };\n\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { sound } = this.props;\n\n    this.audio = new Howl({\n      src: [`./audio/${sound.filename}`],\n      loop: true,\n      volume: sound.volume,\n      autoplay: true,\n    });\n\n    this.audio.once('load', () => {\n      this.setState({ loaded: true });\n    });\n  }\n\n  componentWillUnmount() {\n    this.audio.unload();\n  }\n\n  handleVolumeChange(volume) {\n    const { onVolumeChange, sound } = this.props;\n\n    onVolumeChange(sound, volume);\n\n    this.audio.volume(volume);\n  }\n\n  render() {\n    const { sound, muted } = this.props;\n    const { loaded } = this.state;\n\n    return (\n      <Form.Group className=\"sound\" style={{ backgroundColor: `hsl(${sound.hue}, ${muted ? 0 : 58}%, ${sound.lightness}%)` }}>\n        <VolumeSlider\n          onChange={this.handleVolumeChange}\n          value={sound.volume}\n          audioLoaded={loaded}\n        />\n        {process.env.NODE_ENV !== 'production' && process.env.REACT_APP_FILENAMES === 'true' && <small className=\"filename text-white bg-dark text-monospace\">{sound.filename}</small>}\n      </Form.Group>\n    );\n  }\n}\n\nSound.propTypes = {\n  sound: PropTypes.exact({\n    filename: PropTypes.string,\n    hue: PropTypes.number,\n    lightness: PropTypes.number,\n    volume: PropTypes.number,\n  }).isRequired,\n  muted: PropTypes.bool.isRequired,\n  onVolumeChange: PropTypes.func.isRequired,\n};\n\nexport default Sound;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport Sound from './Sound';\n\nclass Sounds extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n  }\n\n  handleVolumeChange(sound, volume) {\n    const { onVolumeChange } = this.props;\n\n    onVolumeChange(sound, volume);\n  }\n\n  render() {\n    const { sounds, muted } = this.props;\n\n    const columns = sounds.map((sound) => (\n      <Col key={sound.filename} className=\"col-12\">\n        <Sound onVolumeChange={this.handleVolumeChange} sound={sound} muted={muted} />\n      </Col>\n    ));\n\n    return (\n      <Row className=\"no-gutters\">\n        {columns}\n      </Row>\n    );\n  }\n}\n\nSounds.propTypes = {\n  sounds: PropTypes.arrayOf(PropTypes.exact({\n    filename: PropTypes.string,\n    hue: PropTypes.number,\n    lightness: PropTypes.number,\n    volume: PropTypes.number,\n  })).isRequired,\n  muted: PropTypes.bool.isRequired,\n  onVolumeChange: PropTypes.func.isRequired,\n};\n\nexport default Sounds;\n","import React, { PureComponent } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n/* eslint-disable max-len */\n\nclass BodyText extends PureComponent {\n  render() {\n    return (\n      <Container fluid className=\"pt-3 px-4\">\n        <Row>\n          <Col md={6}>\n            <p>Texture randomly chooses 6 audio loops and colours, with volume sliders for mixing and a shuffle button to swap in all new loops and colours. Once you have created a Texture you like, you can copy its shareable URL, to save the audio loops, colours, and volume levels for future use.</p>\n            <p>While there is no prescribed use, Texture was originally proposed to provide ambience, crunchiness and atmosphere for synth music and sonic inspiration for soundtracking. Its colourful and simple interface encourages playfulness over perfection. With an ever growing pool of sounds, Texture can breathe life into an overly clean mix in all kinds of unexpected ways. It is both intense, absorbing and capable of a huge range of presences, characteristics and readings.</p>\n            <h6>Like Texture? Buy us an apple</h6>\n            <a className=\"btn btn-donate mb-3\" role=\"button\" href=\"https://paypal.me/graemejwalker\" target=\"_blank\" rel=\"noreferrer noopener\">Donate via PayPal</a>\n            <h6>Contact</h6>\n            <p>\n              For feedback, comments and questions: <a href=\"mailto:hi@addtexture.com\">hi@addtexture.com</a>\n              <br />\n              For commercial licencing: <a href=\"mailto:licensing@addtexture.com\">licensing@addtexture.com</a>\n            </p>\n            <p>Share your Texture URLS and descriptions on Twitter: <a href=\"https://twitter.com/add_texture\">@add_texture</a> #addtexture</p>\n          </Col>\n          <Col md={6}>\n            <p>Whenever the sounds you’re working with need a bit of roughing up, or needs a refresh or a different perspective, give Texture a try.</p>\n            <p>You could try adding texture to:</p>\n            <ul>\n              <li>Theatre &amp; dance work</li>\n              <li>Sound Design</li>\n              <li>ASMR, meditation, yoga &amp; study</li>\n              <li>Cut out annoying noise</li>\n              <li>Help with sleeping and concentration</li>\n              <li>Soundscape</li>\n              <li>Improvisation</li>\n              <li>Game Design</li>\n              <li>Or just enjoy it by itself, in the background</li>\n            </ul>\n            <p>We’ve already recorded hundreds of sounds just for this project, comprising field and studio recordings and software generated audio. They were mostly recorded at 96 kHz/48-bit and downsampled to 24-bit.</p>\n            <h6>Licensing</h6>\n            <p>\n              <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/4.0/\"><img className=\"float-right pl-2\" alt=\"Creative Commons Licence\" src=\"/images/by-nc.svg\" /></a>\n              Texture is free to use for non-commercial projects and live performances under a\n              {' '}\n              <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/4.0/\">Creative Commons Attribution-NonCommercial 4.0 International License</a>\n              .\n            </p>\n            <p>If you want to use Texture for commercial projects or recordings, you’ll need a Commercial Use Licence which costs £25. This gives you unlimited royalty free single user rights to record the output of addtexture.com for all your commercial projects.</p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default BodyText;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport './ShareURL.css';\n\nclass ShareURL extends PureComponent {\n  handleClick = (event) => {\n    event.target.focus();\n    event.target.select();\n  }\n\n  render() {\n    const { shareableUrl } = this.props;\n\n    return (\n      <Container fluid>\n        <InputGroup className=\"mt-3\">\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"shareable-url-label\">Shareable URL</InputGroup.Text>\n          </InputGroup.Prepend>\n          <Form.Control type=\"text\" id=\"shareable-url\" aria-label=\"Shareable URL for this Texture\" aria-describedby=\"shareable-url-label\" readOnly value={shareableUrl} onClick={this.handleClick} />\n        </InputGroup>\n      </Container>\n    );\n  }\n}\n\nShareURL.propTypes = {\n  shareableUrl: PropTypes.string.isRequired,\n};\n\nexport default ShareURL;\n","import React, { PureComponent } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\n\nclass Footer extends PureComponent {\n  render() {\n    return (\n      <Navbar>\n        <Navbar.Text><small>Texture &copy; Spike Padley and Graeme Walker 2020</small></Navbar.Text>\n        <Navbar.Text className=\"ml-auto\"><small>Texture uses cookies to save your current Texture in between sessions and measure traffic</small></Navbar.Text>\n      </Navbar>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport randomInt from 'random-int';\nimport { Howler } from 'howler';\nimport ls from 'local-storage';\n\nimport { getUniqueHues, getUniqueLightnesses } from './utility';\nimport { encodeShareURL, decodeShareURL } from './share';\n\nimport Header from './Header';\nimport Sounds from './Sounds';\nimport BodyText from './BodyText';\nimport ShareURL from './ShareURL';\nimport Footer from './Footer';\n\nimport soundFilenames from './soundFilenames.json';\n\n/**\n * How many different sound sliders to display at once\n * @type {Number}\n */\nconst SOUNDS_TO_DISPLAY = 6;\n\nfunction getRandomSounds(currentSounds) {\n  const filenames = [];\n\n  while (filenames.length < SOUNDS_TO_DISPLAY) {\n    const randomFilename = soundFilenames[randomInt(0, soundFilenames.length - 1)];\n\n    if (\n      filenames.indexOf(randomFilename) === -1\n      && currentSounds.findIndex((sound) => sound.filename === randomFilename) === -1\n    ) filenames.push(randomFilename);\n  }\n\n  const hues = getUniqueHues(SOUNDS_TO_DISPLAY);\n  const lightnesses = getUniqueLightnesses(SOUNDS_TO_DISPLAY);\n\n  const sounds = filenames.map((filename, index) => ({\n    filename,\n    hue: hues[index],\n    lightness: lightnesses[index],\n    volume: 0,\n  }));\n\n  return sounds;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    let sounds = [];\n\n    if (window.location.hash) {\n      const hash = window.location.hash.substr(1);\n\n      sounds = decodeShareURL(hash);\n    } else if (ls.get('sounds')) sounds = ls.get('sounds');\n    else sounds = getRandomSounds([]);\n\n    const muted = sounds.some((sound) => sound.volume > 0);\n\n    Howler.mute(muted);\n\n    this.state = {\n      sounds,\n      muted,\n    };\n\n    this.handleShuffleClick = this.handleShuffleClick.bind(this);\n    this.handleMuteToggle = this.handleMuteToggle.bind(this);\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n    this.handleHashChange = this.handleHashChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('hashchange', this.handleHashChange, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('hashchange', this.handleHashChange, false);\n  }\n\n  handleShuffleClick() {\n    this.setState((prevState) => {\n      const previousSounds = prevState.sounds;\n\n      const sounds = getRandomSounds(previousSounds);\n\n      ls.set('sounds', sounds);\n\n      return { sounds };\n    });\n  }\n\n  handleMuteToggle() {\n    this.setState((prevState) => {\n      const muted = !prevState.muted;\n\n      Howler.mute(muted);\n\n      return { muted };\n    });\n  }\n\n  handleVolumeChange(sound, volume) {\n    this.setState((prevState) => {\n      const { sounds } = prevState;\n\n      sounds[sounds.indexOf(sound)].volume = volume;\n\n      ls.set('sounds', sounds);\n\n      return { sounds };\n    });\n  }\n\n  handleHashChange() {\n    const hash = window.location.hash.substr(1);\n\n    this.setState({ sounds: decodeShareURL(hash) });\n  }\n\n  render() {\n    const { muted, sounds } = this.state;\n\n    const shareableUrl = `${window.location.origin}${window.location.pathname}#${encodeShareURL(sounds)}`;\n\n    return (\n      <>\n        <Header\n          onShuffleClick={this.handleShuffleClick}\n          onMuteToggle={this.handleMuteToggle}\n          muted={muted}\n        />\n        <Sounds onVolumeChange={this.handleVolumeChange} sounds={sounds} muted={muted} />\n        <ShareURL shareableUrl={shareableUrl} />\n        <BodyText />\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './custom.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}