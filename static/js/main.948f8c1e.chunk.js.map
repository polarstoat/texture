{"version":3,"sources":["serviceWorker.js","getDistinctYetRandomHues.js","Header.js","VolumeSlider.js","Sound.js","Sounds.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","angles","SCALE","hueIsTooClose","hue","hues","some","value","distance","previousHueIsTooClose","previousHue","getDistinctYetRandomHues","numberToGet","length","randomInt","push","Header","props","handleClick","bind","this","onRandomise","Navbar","bg","variant","Brand","Button","className","onClick","Component","Slider","handleChange","event","onChange","target","valueAsNumber","FormControl","type","min","max","step","custom","Sound","state","volume","handleVolumeChange","audio","Howl","src","id","loop","autoplay","setState","unload","Form","Group","style","backgroundColor","backgroundHue","VolumeSlider","Sounds","backgroundHues","sounds","soundIds","map","Col","key","shift","Row","App","randomiseSounds","ran","indexOf","Fragment","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.948f8c1e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import angles from 'angles';\nimport randomInt from 'random-int';\n\nangles.SCALE = 360;\n\n/**\n * The minimum distance (in degrees) between each generated hue\n *\n * @type {Number}\n */\nconst MIN_HUE_DISTANCE = 30;\n\n/**\n * The minimum distance (in degrees) between two adjacently displayed hues\n *\n * @type {Number}\n */\nconst MIN_ADJACENT_HUE_DISTANCE = 60;\n\n/**\n * Checks if the given hue is too close to any in the array of existing hues\n *\n * @param  {Number} hue  The hue to check\n * @param  {Number[]} hues The array of existing hues to check against\n *\n * @return {Boolean}      Whether the given hue is too close to any in the array of existing hues\n */\nfunction hueIsTooClose(hue, hues) {\n  if (hues.some(value => angles.distance(value, hue) < MIN_HUE_DISTANCE)) return true;\n  return false;\n}\n\n/**\n * Checks if the given hue is too close to the previous (adjacently displayed) hue\n * @param  {Number} hue         The hue to check\n * @param  {Number} previousHue The previous hue to check against\n * @return {Boolean}             Whether the given hue is too close to the previous hue\n */\nfunction previousHueIsTooClose(hue, previousHue) {\n  if (angles.distance(hue, previousHue) < MIN_ADJACENT_HUE_DISTANCE) return true;\n  return false;\n}\n\nfunction getDistinctYetRandomHues(numberToGet) {\n  const hues = [];\n\n  while (hues.length < numberToGet) {\n    const hue = randomInt(360);\n\n    if (\n      !hueIsTooClose(hue, hues) &&\n      !previousHueIsTooClose(hue, hues[hues.length - 1])\n    ) hues.push(hue);\n  }\n\n  return hues;\n}\n\nexport default getDistinctYetRandomHues;\n","import React, { Component } from 'react';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.onRandomise();\n  }\n\n  render() {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Texture</Navbar.Brand>\n        <Button variant=\"outline-light\" className=\"ml-auto\" onClick={this.handleClick}>Randomise</Button>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nimport FormControl from 'react-bootstrap/FormControl';\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.valueAsNumber);\n  }\n\n  render() {\n    return (\n      <FormControl value={this.props.value} onChange={this.handleChange} type=\"range\" min={0} max={1} step=\"any\" custom />\n    );\n  }\n}\n\nexport default Slider;\n","import React, { Component } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport { Howl } from 'howler';\n\nimport VolumeSlider from './VolumeSlider.js';\n\nimport './Sound.css';\n\nclass Sound extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      volume: 0,\n    };\n\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.audio = new Howl({\n      src: [`./audio/${this.props.id}.mp3`],\n      loop: true,\n      volume: 0,\n      autoplay: true,\n    });\n  }\n\n  handleVolumeChange(volume) {\n    this.setState({ volume });\n\n    this.audio.volume(volume);\n  }\n\n  componentWillUnmount() {\n    this.audio.unload();\n  }\n\n  render() {\n    return (\n      <Form.Group className=\"sound\" style={{ backgroundColor: `hsl(${this.props.backgroundHue}, 58%, 75%)` }}>\n        <VolumeSlider value={this.state.volume} onChange={this.handleVolumeChange} />\n      </Form.Group>\n    );\n  }\n}\n\nexport default Sound;\n","import React, { Component } from 'react';\n\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport Sound from './Sound.js';\n\nclass Sounds extends Component {\n  render() {\n    const backgroundHues = this.props.backgroundHues;\n\n    const sounds = this.props.soundIds.map(id => (\n      <Col key={id} className=\"col-12\">\n        <Sound id={id} backgroundHue={backgroundHues.shift()} />\n      </Col>\n    ));\n\n    return (\n      <Row className=\"no-gutters\">\n        {sounds}\n      </Row>\n    );\n  }\n}\n\nexport default Sounds;\n","import React, { Component } from 'react';\n\nimport randomInt from 'random-int';\n\nimport getDistinctYetRandomHues from './getDistinctYetRandomHues.js';\n\nimport Header from './Header.js';\nimport Sounds from './Sounds.js';\n\n/**\n * Total number of sound files available to draw from\n * @todo Generate this integer dynamically based on content of /public/audio/ folder\n * @type {Number}\n */\nconst NUMBER_OF_SOUNDS = 9;\n/**\n * How many different sound sliders to display at once\n * @type {Number}\n */\nconst SOUNDS_TO_DISPLAY = 6;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      soundIds: [],\n      backgroundHues: [],\n    };\n\n    this.randomiseSounds = this.randomiseSounds.bind(this);\n  }\n\n  componentDidMount() {\n    this.randomiseSounds();\n  }\n\n  randomiseSounds() {\n    const soundIds = [];\n    while (soundIds.length < SOUNDS_TO_DISPLAY) {\n      const ran = randomInt(1, NUMBER_OF_SOUNDS);\n      if (soundIds.indexOf(ran) === -1) soundIds.push(ran);\n    }\n\n    const backgroundHues = getDistinctYetRandomHues(SOUNDS_TO_DISPLAY);\n\n    this.setState({\n      soundIds,\n      backgroundHues,\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header onRandomise={this.randomiseSounds} />\n        <Sounds soundIds={this.state.soundIds} backgroundHues={this.state.backgroundHues} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}