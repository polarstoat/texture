{"version":3,"sources":["serviceWorker.js","utility.js","MuteButton.js","Header.js","VolumeSlider.js","Sound.js","Sounds.js","BodyText.js","Footer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","angles","SCALE","hueIsTooClose","hue","hues","some","value","distance","previousHueIsTooClose","previousHue","previousLightnessIsTooClose","lightness","previousLightness","Math","abs","MuteButton","Button","variant","this","props","muted","className","onClick","onToggle","size","Component","Header","Navbar","bg","Brand","onMuteToggle","onRandomise","Slider","handleChange","bind","event","onChange","target","valueAsNumber","FormControl","type","min","max","step","custom","Sound","handleVolumeChange","audio","Howl","src","sound","filename","loop","volume","autoplay","onVolumeChange","unload","Form","Group","style","backgroundColor","VolumeSlider","process","Sounds","sounds","map","Col","key","Row","BodyText","Container","fluid","Footer","Text","App","state","randomiseSounds","muteToggle","filenames","randomFilename","soundFilenames","randomInt","length","indexOf","findIndex","push","numberToGet","getUniqueHues","lightnesses","getUniqueLightnesses","index","setState","Howler","mute","Fragment","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b61e9fb8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import angles from 'angles';\nimport randomInt from 'random-int';\n\nangles.SCALE = 360;\n\n/**\n * The minimum distance (in degrees) between each generated hue\n *\n * @type {Number}\n */\nconst MIN_HUE_DISTANCE = 30;\n\n/**\n * The minimum distance (in degrees) between two adjacently displayed hues\n *\n * @type {Number}\n */\nconst MIN_ADJACENT_HUE_DISTANCE = 60;\n\nconst MIN_ADJACENT_LIGHTNESS_DISTANCE = 5;\n\n/**\n * Checks if the given hue is too close to any in the array of existing hues\n *\n * @param  {Number} hue  The hue to check\n * @param  {Number[]} hues The array of existing hues to check against\n * @return {Boolean}      Whether the given hue is too close to any in the array of existing hues\n */\nfunction hueIsTooClose(hue, hues) {\n  if (hues.some(value => angles.distance(value, hue) < MIN_HUE_DISTANCE)) return true;\n  return false;\n}\n\n/**\n * Checks if the given hue is too close to the previous (adjacently displayed) hue\n *\n * @param  {Number} hue         The hue to check\n * @param  {Number} previousHue The previous hue to check against\n * @return {Boolean}             Whether the given hue is too close to the previous hue\n */\nfunction previousHueIsTooClose(hue, previousHue) {\n  if (angles.distance(hue, previousHue) < MIN_ADJACENT_HUE_DISTANCE) return true;\n  return false;\n}\n\nfunction getUniqueHues(numberToGet) {\n  const hues = [];\n\n  while (hues.length < numberToGet) {\n    const hue = randomInt(359);\n\n    if (\n      hues.length === 0 ||\n      (!hueIsTooClose(hue, hues) &&\n      !previousHueIsTooClose(hue, hues[hues.length - 1]))\n    ) hues.push(hue);\n  }\n\n  return hues;\n}\n\nfunction previousLightnessIsTooClose(lightness, previousLightness) {\n  if (Math.abs(lightness - previousLightness) < MIN_ADJACENT_LIGHTNESS_DISTANCE) return true;\n  return false;\n}\n\nfunction getUniqueLightnesses(numberToGet) {\n  const lightnesses = [];\n\n  while (lightnesses.length < numberToGet) {\n    const lightness = randomInt(65, 85);\n\n    if (\n      lightnesses.length === 0 ||\n      !previousLightnessIsTooClose(lightness, lightnesses[lightnesses.length - 1])\n    ) lightnesses.push(lightness);\n  }\n\n  return lightnesses;\n}\n\nexport {\n  getUniqueHues,\n  getUniqueLightnesses,\n};\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { BsVolumeMuteFill, BsVolumeUpFill } from 'react-icons/bs';\n\nclass MuteButton extends Component {\n  render() {\n    return (\n      <Button variant={this.props.muted ? 'light' : 'secondary'} className={this.props.muted ? 'muted' : 'unmuted'} onClick={this.props.onToggle}>{this.props.muted ? <BsVolumeUpFill size=\"1.5em\" /> : <BsVolumeMuteFill size=\"1.5em\" />}</Button>\n    );\n  }\n}\n\nexport default MuteButton;\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\nimport { BsShuffle } from 'react-icons/bs';\n\nimport MuteButton from './MuteButton.js';\n\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Texture</Navbar.Brand>\n        <div className=\"buttons\">\n          <MuteButton onToggle={this.props.onMuteToggle} muted={this.props.muted} />\n          <Button variant=\"secondary\" onClick={this.props.onRandomise}><BsShuffle size=\"1.5em\" /></Button>\n        </div>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport FormControl from 'react-bootstrap/FormControl';\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.valueAsNumber);\n  }\n\n  render() {\n    return (\n      <FormControl value={this.props.value} onChange={this.handleChange} type=\"range\" min={0} max={1} step=\"any\" custom />\n    );\n  }\n}\n\nexport default Slider;\n","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { Howl } from 'howler';\n\nimport VolumeSlider from './VolumeSlider.js';\n\nimport './Sound.css';\n\nclass Sound extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.audio = new Howl({\n      src: [`./audio/${this.props.sound.filename}`],\n      loop: true,\n      volume: 0,\n      autoplay: true,\n    });\n  }\n\n  handleVolumeChange(volume) {\n    this.props.onVolumeChange(this.props.sound, volume);\n\n    this.audio.volume(volume);\n  }\n\n  componentWillUnmount() {\n    this.audio.unload();\n  }\n\n  render() {\n    return (\n      <Form.Group className=\"sound\" style={{ backgroundColor: `hsl(${this.props.sound.hue}, ${this.props.muted ? 0 : 58}%, ${this.props.sound.lightness}%)` }}>\n        <VolumeSlider value={this.props.sound.volume} onChange={this.handleVolumeChange} />\n        {process.env.NODE_ENV !== 'production' && process.env.REACT_APP_FILENAMES === 'true' && <small className=\"filename text-white bg-dark text-monospace\">{this.props.sound.filename}</small>}\n      </Form.Group>\n    );\n  }\n}\n\nexport default Sound;\n","import React, { Component } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport Sound from './Sound.js';\n\nclass Sounds extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n  }\n\n  handleVolumeChange(sound, volume) {\n    this.props.onVolumeChange(sound, volume);\n  }\n\n  render() {\n    const sounds = this.props.sounds.map((sound) => (\n      <Col key={sound.filename} className=\"col-12\">\n        <Sound sound={sound} muted={this.props.muted} onVolumeChange={this.handleVolumeChange} />\n      </Col>\n    ));\n\n    return (\n      <Row className=\"no-gutters\">\n        {sounds}\n      </Row>\n    );\n  }\n}\n\nexport default Sounds;\n","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\n\nclass BodyText extends Component {\n  render() {\n    return (\n      <Container fluid className=\"pt-4 px-4\">\n        <p>Each time you refresh, Texture randomly chooses 6 audio loops and provides volume sliders for mixing. Once you have created a mix you like, you can copy and share it’s unique URL.</p>\n        <p>While there is no prescribed use, Texture was originally proposed to provide texture and atmosphere for synth music and sonic inspiration for soundtracking. With an ever growing pool of sounds, Texture can breathe life into an overly clean mix in all kinds of unexpected ways. It is both intense, absorbing and capable of a huge range of presences, characteristics and readings.</p>\n        <p>Whenever the sounds you’re working with need a bit of roughing up, or needs a refresh or a different perspective, give Texture a try.</p>\n        <p>You could also try adding texture to:</p>\n        <ul>\n          <li>Theatre & dance work</li>\n          <li>ASMR, meditation, yoga</li>\n          <li>Improvisation</li>\n          <li>Games</li>\n          <li>Or simply by itself, in the background</li>\n        </ul>\n      </Container>\n    );\n  }\n}\n\nexport default BodyText;\n","import React, { Component } from 'react';\n\nimport Navbar from 'react-bootstrap/Navbar';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <Navbar>\n        <Navbar.Text><small>Texture &copy; Spike Padley and Graeme Walker 2020</small></Navbar.Text>\n      </Navbar>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport randomInt from 'random-int';\nimport { Howler } from 'howler';\n\nimport { getUniqueHues, getUniqueLightnesses } from './utility.js';\n\nimport Header from './Header.js';\nimport Sounds from './Sounds.js';\nimport BodyText from './BodyText.js';\nimport Footer from './Footer.js';\n\nimport soundFilenames from './soundFilenames.json';\n\n/**\n * How many different sound sliders to display at once\n * @type {Number}\n */\nconst SOUNDS_TO_DISPLAY = 6;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sounds: [],\n      muted: false,\n    };\n\n    this.randomiseSounds = this.randomiseSounds.bind(this);\n    this.muteToggle = this.muteToggle.bind(this);\n    this.handleVolumeChange = this.handleVolumeChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.randomiseSounds();\n  }\n\n  randomiseSounds() {\n    const filenames = [];\n\n    while (filenames.length < SOUNDS_TO_DISPLAY) {\n      const randomFilename = soundFilenames[randomInt(0, soundFilenames.length - 1)];\n\n      if (\n        filenames.indexOf(randomFilename) === -1 &&\n        this.state.sounds.findIndex((sound) => sound.filename === randomFilename) === -1\n      ) filenames.push(randomFilename);\n    }\n\n    const hues = getUniqueHues(SOUNDS_TO_DISPLAY);\n    const lightnesses = getUniqueLightnesses(SOUNDS_TO_DISPLAY);\n\n    const sounds = filenames.map((filename, index) => { return { filename, hue: hues[index], lightness: lightnesses[index], volume: 0 } });\n\n    this.setState({ sounds });\n  }\n\n  muteToggle() {\n    const muted = !this.state.muted;\n\n    this.setState({\n      muted\n    });\n\n    Howler.mute(muted);\n  }\n\n  handleVolumeChange(sound, volume) {\n    const sounds = this.state.sounds;\n\n    sounds[sounds.indexOf(sound)].volume = volume;\n\n    this.setState(sounds);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header onRandomise={this.randomiseSounds} onMuteToggle={this.muteToggle} muted={this.state.muted} />\n        <Sounds sounds={this.state.sounds} muted={this.state.muted} onVolumeChange={this.handleVolumeChange} />\n        <BodyText />\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './bootstrap.custom.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}